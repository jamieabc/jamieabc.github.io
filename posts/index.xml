<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Cognition Limits Imagination</title>
		<link>/posts/</link>
		<description>Recent content in Posts on Cognition Limits Imagination</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Sun, 13 Nov 2022 13:35:03 +0800</lastBuildDate>
		<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Design Pattern - Command (2)</title>
			<link>/posts/design-pattern-command-2/</link>
			<pubDate>Sun, 13 Nov 2022 13:35:03 +0800</pubDate>
			
			<guid>/posts/design-pattern-command-2/</guid>
			<description>我目前理解設計模式（design pattern）存在目的是為了讓軟體分層，使得每個物件提供盡可能單一的功能。這樣設計的好處是只要物件提供單一功能，那麼該物件更易於維護，減少變更的機會。
一般來說採用設計模式能讓軟體設計更有彈性、易於維護，但我覺得不是所有程式碼都需要考慮到設計模式，如果一段程式碼寫好之後便再也不需要變動（不會再有新的需求，不需要再維護），那麼用什麼樣的方式實現其實影嚮不大。
更深一層思考，需求變動通常意味著程式碼變動，如果只是一味的透過增加 function 參數、用 if 去判斷情境，程式碼的複雜度會不斷提高，演化到極致所有程式碼會有「牽一髮而動全身」的特性，讓人難以修改也難以維護。所以某種程度來說，設計模式存在的原因是為了讓程式複雜度處在人能接受的範圍。換句話說，如果有一天電腦能設計出軟體，那麼設計模式對於電腦來說是不必要的，因為電腦有盡乎無窮的算力因此處理複雜度的能力遠高於人類。
隨著商業變動而讓程式碼需要提供更多不同、更複雜的功能 ，低耦合（couple）的設計可以減少維護成本、減少 bug 出現的機率、提高可讀性。
接續前面小吃攤例子，每當攤販新增一種商品也同時需要服務員、顧客的溝通做修改，那這樣的設設違反 single responsibility 原則，因為修改物件（攤販、服務員、顧客）原因來自於跟物件本身功能無關。
接下來再一一拆解顧客與服務員的關係，為什麼顧客需要知道小吃攤點飯時需要加蛋的選項？吃飯加蛋這更像是服務員跟攤販之前的關係。也就是說，顧客與服務員只要能溝通（講國語、講英語），那麼服務員就有辦法知道顧客需要什麼。
接下來是服務員與攤販之類的關係，服務員只要把顧客的訂單通知攤販即可，不同的訂單可能會有不同的參數，而不同訂單的參數屬於各自的 private 資料，並不需要洩露。
當攤販新增了咖哩飯的餐點時，只需要新增一個 class 便能達成：
當服務員新增一種語言時，只要修改 Language 介面極可：
如果以 c++ 實作的話會像是這樣：
class Language { public: virtual void English() { std::cout &amp;lt;&amp;lt; &amp;#34;Cannot speak english&amp;#34; &amp;lt;&amp;lt; std::endl } virtual void Chiniese() { std::cout &amp;lt;&amp;lt; &amp;#34;不會講中文&amp;#34; &amp;lt;&amp;lt; std::endl } }; class ChineseCustomer : public Language { public: void Chinese() override { std::cout &amp;lt;&amp;lt; &amp;#34;來份飯&amp;#34; &amp;lt;&amp;lt; std::endl; } }; class EnglishCustomer : public Language { public: void English() override { std::cout &amp;lt;&amp;lt; &amp;#34;A Noodle&amp;#34; &amp;lt;&amp;lt; std::endl; } }; class Order { public: virtual void Details() = 0; }; class FoodOrder : public Order { public: FoodOrder(bool egg) : egg_(egg) {} void Details() override { std::cout &amp;lt;&amp;lt; &amp;#34;一碗白飯、蛋&amp;#34; &amp;lt;&amp;lt; egg_ &amp;lt;&amp;lt; std::endl; } private: bool egg_ = false; }; class NoodleOrder : public Order { public: NoodleOrder(bool soup) : soup_(soup) {} void Details() override { std::cout &amp;lt;&amp;lt; &amp;#34;一喔飯，湯 &amp;#34; &amp;lt;&amp;lt; soup_ &amp;lt;&amp;lt; endl; } private: boo soup_ = false; }; class Waiter : public Language { public: void Chinese() { std::cout &amp;lt;&amp;lt; &amp;#34;歡迎光臨&amp;#34; &amp;lt;&amp;lt; std::end; } void English() { std::cout &amp;lt;&amp;lt; &amp;#34;Welcome&amp;#34; &amp;lt;&amp;lt; std::end; } Order GenerateOrder() {} }; class FoodStaller { public: FoodStaller() {} void TakeOrder(const Order&amp;amp; order) { std::cout &amp;lt;&amp;lt; order.</description>
			<content type="html"><![CDATA[<p>我目前理解設計模式（design pattern）存在目的是為了讓軟體分層，使得每個物件提供盡可能單一的功能。這樣設計的好處是只要物件提供單一功能，那麼該物件更易於維護，減少變更的機會。</p>
<p>一般來說採用設計模式能讓軟體設計更有彈性、易於維護，但我覺得不是所有程式碼都需要考慮到設計模式，如果一段程式碼寫好之後便再也不需要變動（不會再有新的需求，不需要再維護），那麼用什麼樣的方式實現其實影嚮不大。</p>
<p>更深一層思考，需求變動通常意味著程式碼變動，如果只是一味的透過增加 function 參數、用 if 去判斷情境，程式碼的複雜度會不斷提高，演化到極致所有程式碼會有「牽一髮而動全身」的特性，讓人難以修改也難以維護。所以某種程度來說，設計模式存在的原因是為了讓程式複雜度處在人能接受的範圍。換句話說，如果有一天電腦能設計出軟體，那麼設計模式對於電腦來說是不必要的，因為電腦有盡乎無窮的算力因此處理複雜度的能力遠高於人類。</p>
<p>隨著商業變動而讓程式碼需要提供更多不同、更複雜的功能 ，低耦合（couple）的設計可以減少維護成本、減少 bug 出現的機率、提高可讀性。</p>
<p>接續前面小吃攤例子，每當攤販新增一種商品也同時需要服務員、顧客的溝通做修改，那這樣的設設違反 single responsibility 原則，因為修改物件（攤販、服務員、顧客）原因來自於跟物件本身功能無關。</p>
<p>接下來再一一拆解顧客與服務員的關係，為什麼顧客需要知道小吃攤點飯時需要加蛋的選項？吃飯加蛋這更像是服務員跟攤販之前的關係。也就是說，顧客與服務員只要能溝通（講國語、講英語），那麼服務員就有辦法知道顧客需要什麼。</p>
<figure><img src="/ox-hugo/command-customer-waiter-interface.svg"/>
</figure>

<p>接下來是服務員與攤販之類的關係，服務員只要把顧客的訂單通知攤販即可，不同的訂單可能會有不同的參數，而不同訂單的參數屬於各自的 <code>private</code> 資料，並不需要洩露。</p>
<figure><img src="/ox-hugo/command-waiter-foodstaller-interface.svg"/>
</figure>

<p>當攤販新增了咖哩飯的餐點時，只需要新增一個 <code>class</code> 便能達成：</p>
<figure><img src="/ox-hugo/command-curry-ordere.svg"/>
</figure>

<p>當服務員新增一種語言時，只要修改 <code>Language</code> 介面極可：</p>
<figure><img src="/ox-hugo/command-japanese-language.svg"/>
</figure>

<p>如果以 c++ 實作的話會像是這樣：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Language</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kt">void</span> <span class="n">English</span><span class="p">()</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Cannot speak english&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">Chiniese</span><span class="p">()</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;不會講中文&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ChineseCustomer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Language</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="n">Chinese</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;來份飯&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">EnglishCustomer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Language</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="n">English</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;A Noodle&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Order</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Details</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">FoodOrder</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Order</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">FoodOrder</span><span class="p">(</span><span class="kt">bool</span> <span class="n">egg</span><span class="p">)</span> <span class="o">:</span> <span class="n">egg_</span><span class="p">(</span><span class="n">egg</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">Details</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;一碗白飯、蛋&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">egg_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">bool</span> <span class="n">egg_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">NoodleOrder</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Order</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">NoodleOrder</span><span class="p">(</span><span class="kt">bool</span> <span class="n">soup</span><span class="p">)</span> <span class="o">:</span> <span class="n">soup_</span><span class="p">(</span><span class="n">soup</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">Details</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;一喔飯，湯 &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">soup_</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">boo</span> <span class="n">soup_</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Waiter</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Language</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="n">Chinese</span><span class="p">()</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;歡迎光臨&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">end</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">English</span><span class="p">()</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Welcome&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">end</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">Order</span> <span class="nf">GenerateOrder</span><span class="p">()</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">FoodStaller</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">FoodStaller</span><span class="p">()</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">TakeOrder</span><span class="p">(</span><span class="k">const</span> <span class="n">Order</span><span class="o">&amp;</span> <span class="n">order</span><span class="p">)</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">order</span><span class="p">.</span><span class="n">Details</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">FoodStaller</span> <span class="n">food_staller</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Waiter</span> <span class="n">waiter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 中文溝通
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ChineseCustomer</span> <span class="n">chinese_customer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">waiter</span><span class="p">.</span><span class="n">Chinese</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">chinese_customer</span><span class="p">.</span><span class="n">Chinese</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">food_staller</span><span class="p">.</span><span class="n">TakeOrder</span><span class="p">(</span><span class="n">waiter</span><span class="p">.</span><span class="n">GenerateOrder</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 英文溝通
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">EnglishCustomer</span> <span class="n">english_customer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">waiter</span><span class="p">.</span><span class="n">English</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">english_customer</span><span class="p">.</span><span class="n">English</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">food_staller</span><span class="p">.</span><span class="n">TakeOrder</span><span class="p">(</span><span class="n">waiter</span><span class="p">.</span><span class="n">GenerateOrder</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>這種把實際的指令轉化為參數的方式就是 Command 設計模式。因為參數化後易於儲存與使用，也可以應用在需要提供 undo / redo 的物件。</p>
]]></content>
		</item>
		
		<item>
			<title>Design Pattern - Command (1)</title>
			<link>/posts/design-pattern-command-1/</link>
			<pubDate>Sun, 06 Nov 2022 23:11:07 +0800</pubDate>
			
			<guid>/posts/design-pattern-command-1/</guid>
			<description>想像一個常見的場景：一位顧客走到小吃攤前點了一份小吃，以 class diagram 表示會像是下面這樣：
簡單的情境隱含著一些限制：小吃攤要正好有空、顧客要先排隊、兩者講同樣的語言、先點餐後付錢還是先付錢後取餐、如果修改訂單攤販要記得之前點了什麼…。 這樣模式在人不多時候還行的通，但如果要有效溝通或是人一旦多起來，需要把顧客與攤販的緊密耦合(couple)解耦(decouple)，這時候會需要額外一位服務員做準備餐點之外的工作，像下樣這樣：
顧客與攤販間多了位服務員，把顧客與攤販的關系解耦：
如果顧客講英語，服務員可以聽了英語再把訂單轉換成國語 服務員可以在紙上記下每位顧客的訂單，照著順序發給老闆 服務員可以在點餐/取餐時收取費用 上面的例子，把顧客-服務員-攤販的關系寫的很固定，如果服務員要離職，攤販想要找另一位服務員，提出的要求會是要同時能說英文與中文，只要任何服務員可以說英文與中文便可以應徵。這個時候，會說中文與英文便是一種 interface ：
雖然每個物件依賴於 interface ，但還會有個問題，如果今天攤販在點飯的時候除了可以選擇飯量之外，還可以選要不要加滷汁，這時候會同時需要修改 WaiterIntf ， CustomerIntf ，與 FoodStallerIntf 。物件之間的關係依然是緊緊的耦合，因為顧客、服務員、攤販需要提供一致的溝通。
有沒有可能顧客是巷口大媽，一開始就講：今天人好多，生意不錯喔！？你們家的麵怎麼樣？會不會辣？啊，不行，今天好像有點餓，還是吃點飯？會不會吃不飽啊，有沒有其它能選…
攤販肯定是不需要這段話，而是需要服務員溝通過後轉譯的訂單，這樣的情況意味著顧客下單時說的長篇大論攤販不會也不需要知道，攤販只需要顧客需要真正的東西（訂單）是什麼。
另一個問題是，單純把 API 轉成 interface 是好的作法嗎？怎麼感覺物件間的耦合還是很嚴重？這些問題會在下一篇討論。</description>
			<content type="html"><![CDATA[<p>想像一個常見的場景：一位顧客走到小吃攤前點了一份小吃，以 class diagram 表示會像是下面這樣：</p>
<figure><img src="/ox-hugo/command-simple-order.svg"/>
</figure>

<p>簡單的情境隱含著一些限制：小吃攤要正好有空、顧客要先排隊、兩者講同樣的語言、先點餐後付錢還是先付錢後取餐、如果修改訂單攤販要記得之前點了什麼…。
這樣模式在人不多時候還行的通，但如果要有效溝通或是人一旦多起來，需要把顧客與攤販的緊密耦合(couple)解耦(decouple)，這時候會需要額外一位服務員做準備餐點之外的工作，像下樣這樣：</p>
<figure><img src="/ox-hugo/command-complicte-order.svg"/>
</figure>

<p>顧客與攤販間多了位服務員，把顧客與攤販的關系解耦：</p>
<ul>
<li>如果顧客講英語，服務員可以聽了英語再把訂單轉換成國語</li>
<li>服務員可以在紙上記下每位顧客的訂單，照著順序發給老闆</li>
<li>服務員可以在點餐/取餐時收取費用</li>
</ul>
<p>上面的例子，把顧客-服務員-攤販的關系寫的很固定，如果服務員要離職，攤販想要找另一位服務員，提出的要求會是要同時能說英文與中文，只要任何服務員可以說英文與中文便可以應徵。這個時候，會說中文與英文便是一種 <strong>interface</strong> ：</p>
<figure><img src="/ox-hugo/design-complicate-order-interface.svg"/>
</figure>

<p>雖然每個物件依賴於 <strong>interface</strong> ，但還會有個問題，如果今天攤販在點飯的時候除了可以選擇飯量之外，還可以選要不要加滷汁，這時候會同時需要修改 <code>WaiterIntf</code> ， <code>CustomerIntf</code> ，與 <code>FoodStallerIntf</code> 。物件之間的關係依然是緊緊的耦合，因為顧客、服務員、攤販需要提供一致的溝通。</p>
<p>有沒有可能顧客是巷口大媽，一開始就講：今天人好多，生意不錯喔！？你們家的麵怎麼樣？會不會辣？啊，不行，今天好像有點餓，還是吃點飯？會不會吃不飽啊，有沒有其它能選…</p>
<p>攤販肯定是不需要這段話，而是需要服務員溝通過後轉譯的訂單，這樣的情況意味著顧客下單時說的長篇大論攤販不會也不需要知道，攤販只需要顧客需要真正的東西（訂單）是什麼。</p>
<p>另一個問題是，單純把 API 轉成 <strong>interface</strong> 是好的作法嗎？怎麼感覺物件間的耦合還是很嚴重？這些問題會在下一篇討論。</p>
]]></content>
		</item>
		
		<item>
			<title>低調做人</title>
			<link>/posts/people-low/</link>
			<pubDate>Tue, 27 Jul 2021 22:15:28 +0800</pubDate>
			
			<guid>/posts/people-low/</guid>
			<description>忘了從那邊下載到的電子書，書名是「低調做人 高調做事」，原本以為會講什麼大道理，想不到現在看了50頁，發覺書的內容就不斷在重複書名…只是透過不同的例子。
但這些例子，也不曉得是真是假，其中一個講到關羽因為個性太過張揚，以致於最後戰死麥城。書中分析的很有道理，講的頭頭是道，不過我也沒仔細深就。
也許，有些道理，實際上用看看才知道有沒有用。</description>
			<content type="html"><![CDATA[<p>忘了從那邊下載到的電子書，書名是「低調做人 高調做事」，原本以為會講什麼大道理，想不到現在看了50頁，發覺書的內容就不斷在重複書名…只是透過不同的例子。</p>
<p>但這些例子，也不曉得是真是假，其中一個講到關羽因為個性太過張揚，以致於最後戰死麥城。書中分析的很有道理，講的頭頭是道，不過我也沒仔細深就。</p>
<p>也許，有些道理，實際上用看看才知道有沒有用。</p>
]]></content>
		</item>
		
		<item>
			<title>Dropbox Engineer Ladder</title>
			<link>/posts/dropbox-engineer-ladder/</link>
			<pubDate>Fri, 16 Jul 2021 23:14:09 +0800</pubDate>
			
			<guid>/posts/dropbox-engineer-ladder/</guid>
			<description>最近 Dropbox 發布了 engineer ladder
從 software engineer 到 quality assurance engineer，再到 reliability engineer，不同層級有著不同的標準。
大公司有著明確制度，想要往上爬就需要滿足特定條件，一方面是學習，另一方面也是挑戰，能不能上去還是看個人。
公司內部也有相對應文件，我想，先定好目標，比較知道缺失什麼需要補強。</description>
			<content type="html"><![CDATA[<p>最近 Dropbox 發布了 <a href="https://dropbox.github.io/dbx-career-framework/" title="dropbox engineer ladder">engineer ladder</a></p>
<p>從 software engineer 到 quality assurance engineer，再到 reliability engineer，不同層級有著不同的標準。</p>
<p>大公司有著明確制度，想要往上爬就需要滿足特定條件，一方面是學習，另一方面也是挑戰，能不能上去還是看個人。</p>
<p>公司內部也有相對應文件，我想，先定好目標，比較知道缺失什麼需要補強。</p>
]]></content>
		</item>
		
		<item>
			<title>David Recardo</title>
			<link>/posts/david-recardo/</link>
			<pubDate>Tue, 06 Jul 2021 22:15:48 +0800</pubDate>
			
			<guid>/posts/david-recardo/</guid>
			<description>李嘉圖定律：
土地租金是土地使用者支付的價格，它是由壟斷性（稀缺性）決定，而不是由地主在上面做的投資和改良成本決定；它的價格受限於租用者（農民）能夠承擔的價格。
空氣因為供給無限，所以沒有任何價值；土地從某方面來說也是無限的（地球上還有很多地方的土地未經開發、居住），但不同地段租金有極大差異，為什麼同樣是自然資源，前者沒有任何價值，而後者有極大差異？
李嘉圖給出了一個解釋，土地租金由兩個因素決定：收入差、和其他投資回報對比。
第一個因素來自於自身產出，一片土地有充足水量，能產出的農作物會比貧瘠土地上所產出的農作物多，於是收入差別造成了租金差別。這個原因也同樣適用於人流多的地段、交通發達地段。
第二個因素來自於跟其它投資相比，如果買股票的回報率大於炒房，那麼錢會往股票湧入，於是投入到房地產的資金減少，土地價格下降，造成土地的投資回報率上升。
這個定律並不只存在於自然資源，只要是稀缺資源都適用。隨著網路普及，資訊的流通讓大眾更容易知道什麼是稀缺品，於是在這個時候，同樣商品，不同品質價格會有極大的差異，Iphone、AWS、疫苗、有名講師、著名歌手演唱會門票、台鐵訂票系統，等等。
只要資源稀缺（台灣某些路段的火車），價差就會持續存在。
後面兩句也很關鍵，代表著只要別人成功（有辦法取得高獲利），自己就會成功（租金上漲），好像很雞湯的解釋。</description>
			<content type="html"><![CDATA[<p>李嘉圖定律：</p>
<blockquote>
<p>土地租金是土地使用者支付的價格，它是由壟斷性（稀缺性）決定，而不是由地主在上面做的投資和改良成本決定；它的價格受限於租用者（農民）能夠承擔的價格。</p>
</blockquote>
<p>空氣因為供給無限，所以沒有任何價值；土地從某方面來說也是無限的（地球上還有很多地方的土地未經開發、居住），但不同地段租金有極大差異，為什麼同樣是自然資源，前者沒有任何價值，而後者有極大差異？</p>
<p>李嘉圖給出了一個解釋，土地租金由兩個因素決定：收入差、和其他投資回報對比。</p>
<p>第一個因素來自於自身產出，一片土地有充足水量，能產出的農作物會比貧瘠土地上所產出的農作物多，於是收入差別造成了租金差別。這個原因也同樣適用於人流多的地段、交通發達地段。</p>
<p>第二個因素來自於跟其它投資相比，如果買股票的回報率大於炒房，那麼錢會往股票湧入，於是投入到房地產的資金減少，土地價格下降，造成土地的投資回報率上升。</p>
<p>這個定律並不只存在於自然資源，只要是稀缺資源都適用。隨著網路普及，資訊的流通讓大眾更容易知道什麼是稀缺品，於是在這個時候，同樣商品，不同品質價格會有極大的差異，Iphone、AWS、疫苗、有名講師、著名歌手演唱會門票、台鐵訂票系統，等等。</p>
<p>只要資源稀缺（台灣某些路段的火車），價差就會持續存在。</p>
<p>後面兩句也很關鍵，代表著只要別人成功（有辦法取得高獲利），自己就會成功（租金上漲），好像很雞湯的解釋。</p>
]]></content>
		</item>
		
		<item>
			<title>One and Half Year</title>
			<link>/posts/one-and-half-year/</link>
			<pubDate>Tue, 29 Jun 2021 19:53:14 +0800</pubDate>
			
			<guid>/posts/one-and-half-year/</guid>
			<description>不知不覺，刷題一年半了，從一開始的好奇到有點厭煩，如今習以為常。
有段時間非常在意效率，今天寫了幾題各花了多少時間；有段時間比較怠惰，時間一到就休息。
過去的記憶開始模糊，這一年半好像很累，但又好像轉瞬即逝，最後定格的，是某次上班超累，下班完坐在星巴克，頭痛愈裂，想寫題目卻想不出任何解法。
細節已經不太清楚，只記得那個感覺…只記得努力。
我想，人還是低調、謙虛點，能走的比較遠吧。</description>
			<content type="html"><![CDATA[<p>不知不覺，刷題一年半了，從一開始的好奇到有點厭煩，如今習以為常。</p>
<p>有段時間非常在意效率，今天寫了幾題各花了多少時間；有段時間比較怠惰，時間一到就休息。</p>
<p>過去的記憶開始模糊，這一年半好像很累，但又好像轉瞬即逝，最後定格的，是某次上班超累，下班完坐在星巴克，頭痛愈裂，想寫題目卻想不出任何解法。</p>
<p>細節已經不太清楚，只記得那個感覺…只記得努力。</p>
<p>我想，人還是低調、謙虛點，能走的比較遠吧。</p>
]]></content>
		</item>
		
		<item>
			<title>Bus Factor</title>
			<link>/posts/bus-factor/</link>
			<pubDate>Sun, 27 Jun 2021 18:40:21 +0800</pubDate>
			
			<guid>/posts/bus-factor/</guid>
			<description>The number of people that need to get hit by a bus before your project is completely doomed.
這個指標橫量多少人熟悉專案，直觀上來說如果只有原作者了解專案，那麼專案就愈容易受到個人影嚮；了解的人愈多代表專案相關的知識愈被廣泛熟知。有趣的是，書中提到這個概念並不是在 knowledge sharing 相關章節，而是在鼓勵多與人互動的章節。
大部份人的天性是希望等到程式碼寫到完美後再發佈，但只有一個人知道的專案除了容易後繼無人外，缺乏討論、溝通的專案很可能在設計初期就埋藏了不可彌補的錯誤。
常見的 Documentation，Pair pairgramming，Code review 都可以避免知識只存在少數人腦中的情況。</description>
			<content type="html"><![CDATA[<blockquote>
<p>The number of people that need to get hit by a bus before your project is completely doomed.</p>
</blockquote>
<p>這個指標橫量多少人熟悉專案，直觀上來說如果只有原作者了解專案，那麼專案就愈容易受到個人影嚮；了解的人愈多代表專案相關的知識愈被廣泛熟知。有趣的是，書中提到這個概念並不是在 knowledge sharing 相關章節，而是在鼓勵多與人互動的章節。</p>
<p>大部份人的天性是希望等到程式碼寫到完美後再發佈，但只有一個人知道的專案除了容易後繼無人外，缺乏討論、溝通的專案很可能在設計初期就埋藏了不可彌補的錯誤。</p>
<p>常見的 Documentation，Pair pairgramming，Code review 都可以避免知識只存在少數人腦中的情況。</p>
]]></content>
		</item>
		
		<item>
			<title>Leetcode 795</title>
			<link>/posts/leetcode-795/</link>
			<pubDate>Sun, 20 Jun 2021 14:12:16 +0800</pubDate>
			
			<guid>/posts/leetcode-795/</guid>
			<description>Program description at here
Although I know this problem can be solved in linear time, it still takes me a while to fiture out the optimal solution.
Taking an example of array [1, 2, 1, 3, 1, 4], maximum range from 2 ~ 3.
[1, 2, 1, 3, 1, 4] ^ start from here, 1 &amp;lt; 2 not in range, total 4 sub-arrays meet criteria: [1, 2], [1, 2, 1], [1, 2, 1, 3], [1, 2, 1, 3, 1] ^ start from here, 2 &amp;gt;= 2 &amp;amp;&amp;amp; 2 &amp;lt;= 3 in range, total 4 sub-arrays meet criteria: [2], [2, 1], [2, 1, 3], [2, 1, 3, 1] ^ start from here, 1 &amp;lt; 2, not in range, total 2 sub-arrays meet criteria: [1, 3], [1, 3, 1] ^ start from here, 3 &amp;gt;= 2 &amp;amp;&amp;amp; 3 &amp;lt;= 3 in range, total 2 sub-arrays meet criteria: [3], [3, 1] ^ start from here, 1 &amp;lt; 2 not in range, total 0 sub-arrays meet criteria It&amp;rsquo;s obvious to check valid sub-arrays start from specific index, this way guarantees no duplicate count exists.</description>
			<content type="html"><![CDATA[<p>Program description at <a href="https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/" title="795">here</a></p>
<p>Although I know this problem can be solved in linear time, it still takes me a while to fiture out the optimal solution.</p>
<p>Taking an example of array [1, 2, 1, 3, 1, 4], maximum range from 2 ~ 3.</p>
<pre tabindex="0"><code>[1, 2, 1, 3, 1, 4]
 ^ start from here, 1 &lt; 2 not in range, total 4 sub-arrays meet criteria: [1, 2], [1, 2, 1], [1, 2, 1, 3], [1, 2, 1, 3, 1]
 
    ^ start from here, 2 &gt;= 2 &amp;&amp; 2 &lt;= 3 in range, total 4 sub-arrays meet criteria: [2], [2, 1], [2, 1, 3], [2, 1, 3, 1]
    
       ^ start from here, 1 &lt; 2, not in range, total 2 sub-arrays meet criteria: [1, 3], [1, 3, 1]
       
          ^ start from here, 3 &gt;= 2 &amp;&amp; 3 &lt;= 3 in range, total 2 sub-arrays meet criteria: [3], [3, 1]
          
             ^ start from here, 1 &lt; 2 not in range, total 0 sub-arrays meet criteria
</code></pre><p>It&rsquo;s obvious to check valid sub-arrays start from specific index, this way guarantees no duplicate count exists.</p>
<h2 id="solution-1---time-complexity-on-space-complexity-on">Solution 1 - time complexity O(n), space complexity O(n)</h2>
<p>By above observation, to count all valid sub-arrays, need two variables <code>start</code> and <code>end</code> to denote that every number in this interval is smaller all equal within expected range. Whole array can be separted into several non-overlapping intervals.</p>
<p>Taking an example of array [1, 4, 1, 3, 1, 4, 1, 2], maximum range from 2 ~ 3.</p>
<pre tabindex="0"><code>array [1, 4, 1, 3, 1, 4, 1, 2] can be separated into 3 intervals [1], [1, 3, 1], [1, 2], because 4 out of range 2~3, means no sub-array can include any position has 4 in this example
          x           x
</code></pre><p>Since separated intervals has no overlap area, original array being cut into smaller sub-problems, thus following example is demonstrated in a way that already found intervals without any number out of range.</p>
<p>After candidate intervals are found, it&rsquo;s time to caluclate valid sub-arrays in this interval. If a number is less than expected range (2~3 in above example), itself cannot form a valid sub-array, so this number needs to include numbers after to at least one number in range</p>
<pre tabindex="0"><code>[1, 1, 1, 2, 1], range 2 ~ 3
 ^ this number cannot exist itself alone, because [1] has no number in range 2 ~ 3
   include next number [1, 1] has no number in range 2 ~ 3
   include next number [1, 1, 1] has no number in range 2 ~ 3
   include next number [1, 1, 1, 2] has a number 2 in range 2 ~ 3
   include next number [1, 1, 1, 2, 1] has a number 2 in range 2 ~ 3
   
total 2 valid sub-arrays that meets criteria
</code></pre><p>For above behavior, each iteration needs to know what&rsquo;s the first number afterwards meets criteria. As long as position is found, number of sub-arrays meet criteria can be count. The way to find numbers in range can be stored in a queue, whole behavior is demonstrated below.</p>
<pre tabindex="0"><code>[1, 2, 1, 3, 1], range 2 ~ 3
 ^ not in range, skip,                            queue: []
    ^ in range, put index into queue,             queue: [1]
       ^ not in range, skip,                      queue: [1]
          ^ in range, put index into queue,       queue: [1, 3]
             ^ not in range, skip,                queue: [1, 3]
             
start from beginning of interval:
index 0, queue [1, 3],  0 &lt; 1, the closest first index meets criteria is 1, which means from index 1 ~ last index could all be valid sub-arrays, valid sub-arrays = total_length_from_index_0 - invalid_length = 5 - 1 = 4

index 1, queue [1, 3],  1 == 1, the closest first index meets criteria is self, which means from index 1 ~ last index could all be valid sub-arrays, valid sub-arrays = total_length_from_idnex_1 - invalid_length = 4 - 0 = 4
       , also pop index 1 from queue because remain numbers has larger index, index 1 will not be used anymore

index 2, queue [3], 2 &lt; 1, the closest first index meets criteria is 3, which means from index 3 ~ last index could all be valid sub-arrays, valid sub-arrays = total_length_from_idnex_2 - invalid_length = 3 - 1 = 2

index 3, queue [3], 3 == 3, the closest first index meets criteria is self, which means from index 3 ~ last index could all be valid sub-arrays, valid sub-arrays = total_length_from_idnex_3 - invalid_length = 2 - 0 = 2
       , also pop index 3 from queue because remain numbers has larger index, index 3 will not be used anymore

index 4, queue [], there&#39;s no closest first index meets criteria, valid sub-arrays = 0

start from beginning of array, total valid sub-arrays = 4 + 4 + 2 + 2 + 0
</code></pre><p>Sample code for golang</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// time complextiy: O(n), space complexity: O(n)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">numSubarrayBoundedMax</span><span class="p">(</span><span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">left</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">right</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// in case array reaches end with intervals meet criteria, create
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// a sentinel at end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">nums</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">right</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">n</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">queue</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">prev</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">left</span> <span class="o">&amp;&amp;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">queue</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">&gt;</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="nx">prev</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">queue</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">count</span> <span class="o">+=</span> <span class="nx">i</span><span class="o">-</span><span class="nx">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">queue</span> <span class="p">=</span> <span class="nx">queue</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">count</span> <span class="o">+=</span> <span class="nx">i</span><span class="o">-</span><span class="nx">j</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">prev</span> <span class="p">=</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">count</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Sample code for c++</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">numSubarrayBoundedMax</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">prev</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">// add sentinel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">nums</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">right</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">++</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">left</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">prev</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">count</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                    
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">        <span class="n">prev</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h2 id="solution-2---time-complexity-on-space-complexity-o1">Solution 2 - time complexity O(n), space complexity O(1)</h2>
<p>For solution 1, it takes extra spec to store location of numbers because when traversing from beginning, valid sub-arrays are determined by afterwars number in range. To reduce this extra space, if iterate from end of array, then there&rsquo;s no need to store whole indexes.</p>
<pre tabindex="0"><code>[1, 2, 1, 3, 1], range 2 ~ 3
             ^ not in range, don&#39;t count

          ^ in range, there are 2 sub-arrays start from index 3, [3] and [3, 1], store this value 2

       ^ not int range, use previous valid sub-arrays 2, because 1 is not in range, it needs to depend on number to right which is in range, so valid sub-arrays is the same as previous calculation

    ^ in range, there are 4 sub-arrays start from index 1, [2], [2, 1], [2, 1, 3], [2, 1, 3, 1], store this value 4

 ^ not int range, use previous valid sub-arrays 4, because 1 is not in range, it needs to depend on number to right which is in range, so valid sub-arrays is the same as previous calculation
 
start from end of array, total valid sub-arrays = 0 + 2 + 2 + 4 + 4 = 12
</code></pre><p>This way, no extra space is needed</p>
<p>Sample code for golang</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">numSubarrayBoundedMax</span><span class="p">(</span><span class="nx">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">left</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">right</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">dist</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">  <span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">last</span> <span class="o">:=</span> <span class="nx">n</span> <span class="c1">// in case there are number in criteria at last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">&gt;</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">dist</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">      <span class="nx">last</span> <span class="p">=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">left</span> <span class="o">&amp;&amp;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="nx">right</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">dist</span> <span class="p">=</span> <span class="nx">last</span> <span class="o">-</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">count</span> <span class="o">+=</span> <span class="nx">dist</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">count</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Smaple code for c++</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">numSubarrayBoundedMax</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">dist</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">last</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">dist</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">left</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">dist</span> <span class="o">=</span> <span class="n">last</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">count</span> <span class="o">+=</span> <span class="n">dist</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Hyrum&#39;s Law</title>
			<link>/posts/hyrum-law/</link>
			<pubDate>Wed, 16 Jun 2021 21:58:12 +0800</pubDate>
			
			<guid>/posts/hyrum-law/</guid>
			<description>這章在講 scalability，裡面提到一個概念 Hyrum&amp;rsquo;s Law (Hyrum 是 Google 工程師):
With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.
這段話大意是任何提供給外部系統的 API，不論文件上如何寫，任何可被觀測的行為最終都會被某種方式所依賴。有點繞口，書上舉的例子是 hash table，幾乎所有工程師都知道 hash table 內儲存物件的順序是不固定的，所以程式執行不該依賴於 hash table 所提供的順序。
我在這部影片中聽到原作者的另一個例子：在某個 c++ 的 header file 裡面加了一行註解，導致測試壞掉……how could that happen? 原來是有人把測試寫死在程式執行到第幾行的時候，所以新增註解導致錯誤。
愈多人使用 API 代表提供愈高的價值，但因為愈多人使用也促使這隻 API 的 dependency 愈高，反而阻止了 API 更新。
依賴無處不在</description>
			<content type="html"><![CDATA[<p>這章在講 scalability，裡面提到一個概念 Hyrum&rsquo;s Law (Hyrum 是 Google 工程師):</p>
<blockquote>
<p>With a sufficient number of users of an API,
it does not matter what you promise in the contract:
all observable behaviors of your system
will be depended on by somebody.</p>
</blockquote>
<p>這段話大意是任何提供給外部系統的 API，不論文件上如何寫，任何可被觀測的行為最終都會被某種方式所依賴。有點繞口，書上舉的例子是 hash table，幾乎所有工程師都知道 hash table 內儲存物件的順序是不固定的，所以程式執行不該依賴於 hash table 所提供的順序。</p>
<p>我在這部<a href="https://www.youtube.com/watch?v=5Wdgjw6IGDM">影片</a>中聽到原作者的另一個例子：在某個 c++ 的 header file 裡面加了一行註解，導致測試壞掉……how could that happen? 原來是有人把測試寫死在程式執行到第幾行的時候，所以新增註解導致錯誤。</p>
<p>愈多人使用 API 代表提供愈高的價值，但因為愈多人使用也促使這隻 API 的 dependency 愈高，反而阻止了 API 更新。</p>
<p>依賴無處不在</p>
]]></content>
		</item>
		
		<item>
			<title>Leetcode 1552 (2)</title>
			<link>/posts/leetcode-1552-2/</link>
			<pubDate>Tue, 25 Aug 2020 20:25:19 +0800</pubDate>
			
			<guid>/posts/leetcode-1552-2/</guid>
			<description>This article tries to write down some notes while trying to solve problem 1552.
After some days of thinking, I finally understand why this is a binary search problem.
Thinking Didn&amp;rsquo;t think of binary search because I miss some details about this problem:
To get maximum of minimum distance among selected numbers, smallest &amp;amp; largest numbers will definited being selected, because choosing them provides maximum range to distribute distance. Once smallest &amp;amp; largest numbers are selected, theoretically maximum distance could be upper bounded to (largest - smallest) / (selected - 1)</description>
			<content type="html"><![CDATA[<p>This article tries to write down some notes while trying to solve problem <a href="https://leetcode.com/problems/magnetic-force-between-two-balls/">1552</a>.</p>
<p>After some days of thinking, I finally understand why this is a binary search problem.</p>
<h1 id="thinking">Thinking</h1>
<p>Didn&rsquo;t think of binary search because I miss some details about this problem:</p>
<ul>
<li>To get maximum of minimum distance among selected numbers, smallest &amp; largest numbers will definited being selected, because choosing them provides maximum range to distribute distance.</li>
</ul>
<ul>
<li>
<p>Once smallest &amp; largest numbers are selected, theoretically maximum distance could be upper bounded to <code>(largest - smallest) / (selected - 1)</code></p>
</li>
<li>
<p>Since maximum possible distance is decided, use binary search to find if a chosen distance is possible. If it&rsquo;s possible search upper half of the range, otherwise, search bottom half of the range.</p>
</li>
</ul>
<h1 id="example">Example</h1>
<p>Take numbers = [1, 2, 3, 4, 7, 12], selected = 3 as an example:</p>
<p>Distance can only come from smallest(1) and largest(12) being selected. When 1 &amp; 12 are selected, theoretically maximum distance is also determined: <code>(12-1)/(3-1) = 5</code></p>
<p>mid of 0-5 is 2, try distance 2: <code>1, 3, 7</code> meets</p>
<p>mid of 2-5 is 3, try distance 3: <code>1, 4, 7</code> meets</p>
<p>half of 3-5 is 4, try distance 4: <code>1, 7, 12</code> meets</p>
<p>half of 4-5 is 5(close to upper), try distance 5: <code>1, 7, 12</code> meets</p>
<p>so final answer is 5.</p>
<h1 id="summary">Summary</h1>
<p>After noticing some details, the problem solution time complexity can be reduced from O(m*n^2) to O(n log n). In computer world, best solution dominates!</p>
]]></content>
		</item>
		
		<item>
			<title>Leetcode 1552 (1)</title>
			<link>/posts/leetcode-1552-1/</link>
			<pubDate>Fri, 21 Aug 2020 20:19:13 +0800</pubDate>
			
			<guid>/posts/leetcode-1552-1/</guid>
			<description>This article tries to write down some notes while trying to solve problem 1552.
I think this problem can be restated as follows: given some positive integers with total size n, pick m numbers such that minimum distance among each selected is maximum.
When first see this problem, I think it&amp;rsquo;s a knapsack problem: every number will be selected or not, find those possible combinations (pick m from n), calculate minimum distance, choose maximum from them.</description>
			<content type="html"><![CDATA[<p>This article tries to write down some notes while trying to solve problem <a href="https://leetcode.com/problems/magnetic-force-between-two-balls/">1552</a>.</p>
<p>I think this problem can be restated as follows: given some positive integers with total size <code>n</code>, pick <code>m</code> numbers such that minimum distance among each selected is maximum.</p>
<p>When first see this problem, I think it&rsquo;s a knapsack problem: every number will be selected or not, find those possible combinations (pick <code>m</code> from <code>n</code>), calculate minimum distance, choose maximum from them. It&rsquo;s an optimization problem, so dp/tabelization technique could be used.</p>
<p>Pure <code>recursion</code>/<code>dfs</code> is easy to come up with, but I didn&rsquo;t write clean code at the first time. I implement code similar to tree traversal, minimum distance is determined during traversing, and maximum distance is determined when returning back form resursion call.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">recursive</span><span class="p">(</span><span class="nx">position</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">prev</span><span class="p">,</span> <span class="nx">prevMin</span><span class="p">,</span> <span class="nx">remain</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// reaches end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">remain</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">prevMin</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="c1">// cannot accomplish goal
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">start</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="o">||</span> <span class="nx">remain</span> <span class="p">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">position</span><span class="p">)</span><span class="o">-</span><span class="nx">start</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MinInt32</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">d1</span><span class="p">,</span> <span class="nx">d2</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">maxDist</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MinInt32</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">start</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">position</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// choose
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">d1</span> <span class="p">=</span> <span class="nf">recursive</span><span class="p">(</span><span class="nx">position</span><span class="p">,</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="nx">prevMin</span><span class="p">,</span> <span class="nx">position</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">-</span><span class="nx">position</span><span class="p">[</span><span class="nx">prev</span><span class="p">]),</span> <span class="nx">remain</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">        <span class="c1">// not choose
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">d2</span> <span class="p">=</span> <span class="nf">recursive</span><span class="p">(</span><span class="nx">position</span><span class="p">,</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">prev</span><span class="p">,</span> <span class="nx">prevMin</span><span class="p">,</span> <span class="nx">remain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">        <span class="nx">maxDist</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="nx">maxDist</span><span class="p">,</span> <span class="nf">max</span><span class="p">(</span><span class="nx">d1</span><span class="p">,</span> <span class="nx">d2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">maxDist</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>But this is not a clean code, some arguments are not necessary, such as <code>prev</code>, <code>prevMin</code>, those arguments denotes minimum distance while traversing. Then I see this <a href="https://leetcode.com/problems/magnetic-force-between-two-balls/discuss/794188/Top-Bottom-DP-with-Memoization-Java-TLE">post</a>, author provides much more elegant code. So I started to think: <code>what did I do wrong?</code></p>
<p>Too many things are put in this funciton, such as:</p>
<ul>
<li>
<p>boundary/traversing checking</p>
<p><code>start</code> should no exceed <code>length - remain</code>, but this can be improved while traversing, just don&rsquo;t exceed boundary, so checkings can be removed.</p>
</li>
<li>
<p>duplicate computation</p>
<p>If I think it more clearly, not choose of specific index means choose the next position with <code>remain</code> equals same.</p>
</li>
</ul>
<p>After modification, code is better:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">recursive</span><span class="p">(</span><span class="nx">position</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">memo</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">remain</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">remain</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MaxInt32</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">memo</span><span class="p">[</span><span class="nx">start</span><span class="p">][</span><span class="nx">remain</span><span class="p">]</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">memo</span><span class="p">[</span><span class="nx">start</span><span class="p">][</span><span class="nx">remain</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">maxDist</span> <span class="o">:=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MinInt32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">position</span><span class="p">)</span><span class="o">-</span><span class="nx">remain</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">d</span> <span class="o">:=</span> <span class="nf">min</span><span class="p">(</span><span class="nx">position</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">-</span><span class="nx">position</span><span class="p">[</span><span class="nx">start</span><span class="p">],</span> <span class="nf">recursive</span><span class="p">(</span><span class="nx">position</span><span class="p">,</span> <span class="nx">memo</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">remain</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maxDist</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="nx">maxDist</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">memo</span><span class="p">[</span><span class="nx">start</span><span class="p">][</span><span class="nx">remain</span><span class="p">]</span> <span class="p">=</span> <span class="nx">maxDist</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">maxDist</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Originally I think it&rsquo;s end of the problem, but thinkg turn out of my expection, when I check hints and discussions, optimal solution comes from <code>binary search</code>, what!!? I have never thought of that, and even saw hints and I still cannot figure out how to do it.</p>
<p>So I decide to leave this problem in the list, try to figure out why it&rsquo;s a <code>binary search</code> problem, and come back some other day.</p>
]]></content>
		</item>
		
		<item>
			<title>Leetcode 1547 (2)</title>
			<link>/posts/leetcode-1547-2/</link>
			<pubDate>Sat, 15 Aug 2020 12:43:05 +0800</pubDate>
			
			<guid>/posts/leetcode-1547-2/</guid>
			<description>Thinking After brute force to find a solution and think about this proble, I have some other observations.
Initially I have the idea to choosing closest middle cut in range, and it fails to guarantee always global optimal result.
More specifically, the heuristic fails at this test case: n = 30, cuts = [5, 7, 13, 15, 18, 25, 26, 29]
According to find closest middle cut, it will choose 15 as first cut since it&amp;rsquo;s the the half of 30, and best min cuts under 15 is 94, one of the possible outcome is [15, 7, 5, 13, 25, 26, 29, 18]</description>
			<content type="html"><![CDATA[<h1 id="thinking">Thinking</h1>
<p>After brute force to find a solution and think about this proble, I have some other observations.</p>
<p>Initially I have the idea to choosing closest middle cut in range, and it fails to guarantee always global optimal result.</p>
<p>More specifically, the heuristic fails at this test case:
<code>n = 30, cuts = [5, 7, 13, 15, 18, 25, 26, 29]</code></p>
<p>According to find closest middle cut, it will choose 15 as first cut since it&rsquo;s the the half of 30, and best min cuts under 15 is 94, one of the possible outcome is [15, 7, 5, 13, 25, 26, 29, 18]</p>
<p>But global minimum cost is 92 when 18 is first cut, one of possible outcome is [18, 7, 5, 13, 15, 25, 29, 26]</p>
<h1 id="observations">Observations</h1>
<p>I guess it&rsquo;s somehow relates to nature of this problem: <code>exact order of each cut is not important, relatioships among separated cut groups matters</code></p>
<p>In previous example of <code>n = 30, cuts = [5, 7, 13, 15, 18, 25, 26, 29]</code>, several minimum cost to 94 when first cut is 18:</p>
<blockquote>
<p>[18 7 5 13 15 25 26 29]</p>
</blockquote>
<blockquote>
<p>[18 25 7 5 13 15 26 29]</p>
</blockquote>
<blockquote>
<p>[18 25 29 7 5 26 13 15]</p>
</blockquote>
<blockquote>
<p>[18 7 25 26 13 5 15 29]</p>
</blockquote>
<blockquote>
<p>&hellip;</p>
</blockquote>
<p>For this problem, minimum cost only occurs when first cut is 18, and 15 should be cut after 13, etc.</p>
<p>I also try to simplify the problem as follows:</p>
<ul>
<li>
<p>for cut count = 2, choose the cut close to middle first</p>
<ul>
<li>
<p>n = 20, cuts = [5, 13]</p>
<ul>
<li>cuts: [5, 13], cost = 20 + 15</li>
<li>cuts: [13, 5], cost = 20 + 13</li>
</ul>
<p>choose 13 first because it&rsquo;s closer to middle (10)</p>
</li>
<li>
<p>n = 30, cuts = [5, 10]</p>
<ul>
<li>cuts: [5, 10], cost = 30 + 25</li>
<li>cuts: [10, 5], cost = 30 + 10</li>
</ul>
<p>choose 10 first because it&rsquo;s closer to middle (15)</p>
</li>
<li>
<p>n = 30, cuts = [18, 25]</p>
<ul>
<li>cuts: [18, 25], cost = 30 + 12</li>
<li>cuts: [25, 18], cost = 30 + 25</li>
</ul>
<p>choose 18 first because it&rsquo;s closer to middle (15)</p>
</li>
</ul>
</li>
<li>
<p>for cuts count = 3, to minimize overall cost is to minimize next cut, choose cut close to middle is still best choice</p>
<ul>
<li>
<p>n = 30, cuts = [1, 2, 3]</p>
<ul>
<li>cuts: [1, 2, 3], cost = 30 + 29 + 18 - (1)</li>
<li>cuts: [2, 1, 3], cost = 30 + 2 + 28 - (2)</li>
<li>cuts: [3, 2, 1], cost = 30 + 2 + 1 - (3)</li>
</ul>
<p>(2) is smaller than (1) is because cost to cut 1 is reduced</p>
<p>(3) is smaller than (2) is because cost to cut 3 is reduced</p>
<p>choose 3 first because it closer to middle (15)</p>
</li>
<li>
<p>n = 30, cuts = [16, 24, 7]</p>
<ul>
<li>cuts: [7, 16, 24], cost = 30 + 23 + 14</li>
<li>cuts: [16, 7, 24], cost = 30 + 16 + 14</li>
<li>cuts: [24, 7, 16], cost = 30 + 24 + 17</li>
</ul>
<p>choose 16 first because it&rsquo;s closer to middle (15)</p>
</li>
</ul>
</li>
</ul>
<p>But the heuristic to choose cut close to middle doesn&rsquo;t always guarantee to have global optimal solution in the situation of 4 cuts, take <code>n = 30, cuts = [10, 15, 18, 25]</code> as example:</p>
<ul>
<li>cuts: [15, 10, 25, 18], cost = 30 + 15 + 15 + 10 = 60 + 10 - (1)</li>
<li>cuts: [18, 10, 25, 15], cost = 30 + 18 + 12 + 8 = 60 + 8 - (2)</li>
</ul>
<p>(2) has smaller cost than (1) because cost of 15 is reduced.</p>
<p>I found that if there are 4 cuts, in the situation that first cut separate rest of cuts into 2 groups (in the situation at least one cut exist in these 2 groups), assume c is the first cut in middle:</p>
<pre tabindex="0"><code>_  _  ... _ | _  _ ... _  _
0         c   c           n
</code></pre><p>since at least one cut exist, minimum cost will be determined by the group has 2 cuts because total 4 cuts, first cut is determined, there might be 2 conditions: <code>[x, c, y, z]</code> or <code>[x, y, c, z]</code></p>
<ul>
<li>[x, c, y, z] since x &amp; y exist, cost = n + (n/2) + (n/2) + (cost to cut y or z)</li>
<li>[x, y, c, z] since x &amp; z exist, cost = n + (n/2) + (n/2) + (cost to cut x or y)</li>
</ul>
<p>In this counter example, choosing middle cut doesn&rsquo;t always guarantee the global optimal result, since minimum cost is determined by the last cut (y, z in [x, c, y, z] or x, y in [x, y, c, z]), which is not considered when choosing fist middle cut c</p>
<p>So, after this, problem can only be solved by brute force or dp.</p>
]]></content>
		</item>
		
		<item>
			<title>Leetcode 1547 (1)</title>
			<link>/posts/leetcode-1547-1/</link>
			<pubDate>Mon, 10 Aug 2020 15:48:42 +0800</pubDate>
			
			<guid>/posts/leetcode-1547-1/</guid>
			<description>This article is to write down some notes while solving this problem.
Greedy I started with this example:
n = 7, cuts = [1,3,4,5]
initial status:
_ _ _ _ _ _ _ 0 7 first cut at 3:
_ _ _ _ | _ _ _ _ _ 0 3 3 7 cost: 7 (because total length before cut is 7)
second cut at 1:
_ _ | _ _ _ | _ _ _ _ _ 0 1 1 3 3 7 cost: 7 + 3 (because total length at 1 is 3)</description>
			<content type="html"><![CDATA[<p>This article is to write down some notes while solving this <a href="https://leetcode.com/problems/minimum-cost-to-cut-a-stick/">problem</a>.</p>
<h1 id="greedy">Greedy</h1>
<p>I started with this example:</p>
<blockquote>
<p>n = 7, cuts = [1,3,4,5]</p>
</blockquote>
<ol>
<li>
<p>initial status:</p>
<pre><code> _ _ _ _ _ _ _
 0           7
</code></pre>
</li>
<li>
<p>first cut at 3:</p>
<pre><code> _ _ _ _ | _ _ _ _ _
 0     3   3       7
</code></pre>
<p>cost: 7 (because total length before cut is 7)</p>
</li>
<li>
<p>second cut at 1:</p>
<pre><code> _ _ | _ _ _ | _ _ _ _ _
 0 1   1   3   3       7
</code></pre>
<p>cost: 7 + 3 (because total length at 1 is 3)</p>
</li>
<li>
<p>third cut at 5:</p>
<pre><code> _ _ | _ _ _ | _ _ _ | _ _ _
 0 1   1   3   3   5   5   7
</code></pre>
<p>cost: 10 + 4 (because total length at 5 is 7-3)</p>
</li>
<li>
<p>forth cut at 4:</p>
<pre><code> _ _ | _ _ _ | _ _ | _ _ | _ _ _
 0 1   1   3   3 4   4 5   5   7
</code></pre>
<p>cost: 14 + 2 (because total length at 4 is 5-3)</p>
</li>
</ol>
<p>After operation, total cost is 16 which is expected answer, so I came up
with an heurestic: for every interval, choose cut as close to mid as possible.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">minCost</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">cuts</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">(</span><span class="nx">cuts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">recursive</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">cuts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">recursive</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">cuts</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">start</span> <span class="o">==</span> <span class="nx">end</span> <span class="o">||</span> <span class="nb">len</span><span class="p">(</span><span class="nx">cuts</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">target</span> <span class="o">:=</span> <span class="nx">start</span> <span class="o">+</span> <span class="p">(</span><span class="nx">end</span><span class="o">-</span><span class="nx">start</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// find closest index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">idx</span> <span class="o">:=</span> <span class="nf">binarySearch</span><span class="p">(</span><span class="nx">cuts</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">prevIdx</span> <span class="o">:=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">idx</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cuts</span><span class="p">[</span><span class="nx">prevIdx</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">start</span> <span class="o">&amp;&amp;</span> <span class="nf">abs</span><span class="p">(</span><span class="nx">cuts</span><span class="p">[</span><span class="nx">prevIdx</span><span class="p">]</span><span class="o">-</span><span class="nx">target</span><span class="p">)</span> <span class="p">&lt;</span> <span class="nf">abs</span><span class="p">(</span><span class="nx">cuts</span><span class="p">[</span><span class="nx">idx</span><span class="p">]</span><span class="o">-</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">idx</span> <span class="p">=</span> <span class="nx">prevIdx</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// go divide &amp; conquer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">end</span> <span class="o">-</span> <span class="nx">start</span> <span class="o">+</span> <span class="nf">recursive</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">cuts</span><span class="p">[</span><span class="nx">idx</span><span class="p">],</span> <span class="nx">cuts</span><span class="p">[:</span><span class="nx">idx</span><span class="p">])</span> <span class="o">+</span> <span class="nf">recursive</span><span class="p">(</span><span class="nx">cuts</span><span class="p">[</span><span class="nx">idx</span><span class="p">],</span> <span class="nx">end</span><span class="p">,</span> <span class="nx">cuts</span><span class="p">[</span><span class="nx">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">max</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="nx">j</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">j</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">abs</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">-</span><span class="nx">i</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// return index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">binarySearch</span><span class="p">(</span><span class="nx">cuts</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">target</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">low</span><span class="p">,</span> <span class="nx">high</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">cuts</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">low</span> <span class="p">&lt;</span> <span class="nx">high</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mid</span> <span class="o">:=</span> <span class="nx">low</span> <span class="o">+</span> <span class="p">(</span><span class="nx">high</span><span class="o">-</span><span class="nx">low</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">cuts</span><span class="p">[</span><span class="nx">mid</span><span class="p">]</span> <span class="o">==</span> <span class="nx">target</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">mid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">cuts</span><span class="p">[</span><span class="nx">mid</span><span class="p">]</span> <span class="p">&gt;</span> <span class="nx">target</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">high</span> <span class="p">=</span> <span class="nx">mid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">low</span> <span class="p">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">low</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Unfortunately, this fails at test case: <code>30 [18,15,13,7,5,26,25,29]</code>.</p>
<p>By above algorithm, cut procedure:</p>
<ol>
<li>
<p>cut at 15:</p>
<pre><code> _ _ _ _ ... _ _ _ | _ _ _ _ ... _ _ _
 0              15  15              30
</code></pre>
<p>cost: 30</p>
</li>
<li>
<p>cut at 7:</p>
<pre><code> _ _ _ ... _ _ | _ _ _ ... _ _ | _ _ _ ... _ _
 0           7   7          15  15          30
</code></pre>
<p>cost: 30 + 15</p>
</li>
<li>
<p>cut at 5:</p>
<pre><code> _ _ ... _ _ | _ _ _ | _ _ ... _ _ | _ _ _ ... _ _ _
 0         5   5   7   7        15  15            30
</code></pre>
<p>cost: 45 + 7</p>
</li>
<li>
<p>cut at 13:</p>
<pre><code> _ _ ... _ _ | _ _ _ | _ ... _ | _ _ _ | _ _ _ ... _ _ _
 0         5   5   7   7    13  13  15  15            30
</code></pre>
<p>cost: 52 + 8</p>
</li>
<li>
<p>cut at 25:</p>
<pre><code> _ ... _ | _ _ _ | _ ... _ | _ _ _ | _ ... _ | _ ... _
 0     5   5   7   7    13  13  15  15    25  25    30
</code></pre>
<p>cost: 60 + 15</p>
</li>
<li>
<p>cut at 18:</p>
<pre><code> _ ... _ | _ _ _ | _ ... _ | _ _ _ | _ ... _ | _ ... _ | _ ... _
 0     5   5   7   7    13  13  15  15    18  18    25  25    30
</code></pre>
<p>cost: 75 + 10</p>
</li>
<li>
<p>cut at 26:</p>
<pre><code> _ ... _ | _ _ _ | _ ... _ | _ _ _ | _ ... _ | _ ... _ | _  _ | _ ... _
 0     5   5   7   7    13  13  15  15    18  18    25  25 26  26    30
</code></pre>
<p>cost: 85 + 5</p>
</li>
<li>
<p>cut at 29:</p>
<pre><code> _ ... _ | _ _ _ | _ ... _ | _ _ _ | _ ... _ | _ ... _ | _  _ | _ ... _ | _  _
 0     5   5   7   7    13  13  15  15    18  18    25  25 26  26    29  29 30
</code></pre>
<p>cost: 90 + 4</p>
</li>
</ol>
<p>By choosing closest cut, total cost is 94, but answer is 92. I haven&rsquo;t figure out how to get this optimal solution yet&hellip;</p>
<h1 id="examplify">Examplify</h1>
<p>Then I try to think from another way, try out with some base cases:</p>
<ul>
<li>
<p>1 cut</p>
<p>No matter where I put cost will be total size</p>
</li>
<li>
<p>2 cuts</p>
<p>choose the one that is closer to midddle, take n = 30 cuts = [5, 18] as an example:</p>
<ul>
<li>
<p>cuts [5, 18]</p>
<p>cost = 30 + 25 = 55</p>
</li>
<li>
<p>cuts [18, 5]</p>
<p>cost = 30 + 18 = 48</p>
</li>
</ul>
</li>
<li>
<p>3 cuts</p>
<p>There are some choices to illustrate: take 30 as example, cuts: [1, 2, 3]</p>
<ul>
<li>
<p>cuts [1, 2, 3]</p>
<p>cost = 30 + 29 + 28 = 87</p>
</li>
<li>
<p>cuts [2, 1, 3]</p>
<p>cost = 30 + 2 + 28 = 60</p>
</li>
<li>
<p>cuts [3, 1, 2]</p>
<p>cost = 30 + 3 + 2 = 35</p>
</li>
</ul>
<p>Take another example, cuts: [3, 20, 13]</p>
<ul>
<li>
<p>cuts [3, 20, 13]</p>
<p>cost = 30 + 27 + 17 = 74</p>
</li>
<li>
<p>cuts [13, 3, 20]</p>
<p>cost = 30 + 13 + 17 = 60</p>
</li>
<li>
<p>cuts [20, 3, 13]</p>
<p>cost = 30 + 20 + 17 = 67</p>
</li>
</ul>
<p>The other example, cuts: [18, 24, 29]</p>
<ul>
<li>
<p>cuts [18, 24, 29]</p>
<p>cost = 30 + 12 + 6 = 48</p>
</li>
<li>
<p>cuts [24, 18, 29]</p>
<p>cost = 30 + 24 + 6 = 60</p>
</li>
<li>
<p>cuts [29, 18, 24]</p>
<p>cost = 30 + 29 + 11 = 70</p>
</li>
</ul>
</li>
</ul>
<p>It seems that 3 cuts example fits into previous greedy method: choose cut closes to middle size as possible.</p>
<p>Haven&rsquo;t figure out the solution, just write down thinking process, and I will come back the other day to think again.</p>
]]></content>
		</item>
		
		<item>
			<title>Raise Coverate Rate to 80</title>
			<link>/posts/raise-coverate-rate-to-80/</link>
			<pubDate>Sun, 08 Mar 2020 17:25:34 +0800</pubDate>
			
			<guid>/posts/raise-coverate-rate-to-80/</guid>
			<description>Recently I have done raising unit tests coverage rate of 2 packages to at least 80%. Of course, high coverage rate isn&amp;rsquo;t always a gold standard to achieve, and some corner conditions are not necessray to test, so 80% seems a number that tries to demonstrate most code paths are testable.
These 2 packges with 0% and 20% unit test coverate rate at the time I started to modify. After some refactoring, both packages&amp;rsquo; coverage rate reaches 80%.</description>
			<content type="html"><![CDATA[<p>Recently I have done raising unit tests coverage rate of 2 packages to at least 80%. Of course, high coverage rate isn&rsquo;t always a gold standard to achieve, and some corner conditions are not necessray to test, so 80% seems a number that tries to demonstrate most code paths are testable.</p>
<p>These 2 packges with 0% and 20% unit test coverate rate at the time I started to modify. After some refactoring, both packages&rsquo; coverage rate reaches 80%. I believe most part of code is testable, and I want to summarize experience of 3 weeks working.</p>
<ul>
<li>Dependency Inversion Principle</li>
</ul>
<p>Dependencies of a package sometimes is unavoidable, so now when I try to refactor, the first thing I will list is it&rsquo;s depdendencies, because those things are usualy necessary to control. Second thing is to check those dependencies is in the form of <code>interface</code>, <code>functions/methods</code>, <code>data structures</code>.</p>
<p>All of dependency can be managed by input parameter, so that those dependencies are controllable.</p>
<p>Take following code as an example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">one</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">obj</span> <span class="o">:=</span> <span class="nx">two</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">v</span><span class="p">.</span><span class="nf">Closed</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">two</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Two</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Closed</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">data</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">closed</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">data</span><span class="p">)</span> <span class="nf">Closed</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">closed</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Get</span><span class="p">()</span> <span class="nx">Two</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">data</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Closed</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Since <code>Two</code> is already an <code>interface</code>, everything I need to do is create a new variable of <code>two.Get()</code> and given by function arguments so that it&rsquo;s testable and controllable.</p>
<ul>
<li>Single Responsibility Principle</li>
</ul>
<p>This one is about piece of code should only be responsible for a small part of task, or in other words, one piece of code should be modified by one reason.</p>
<p>If a pacakge does too many things, then it&rsquo;s really hard to test. Taking network IO for example, if a pacakge creates http server, settings up routing paths, deciding which function responds to specific routes, then when it comes to testing, I have to start whole server and check for route&rsquo;s response. But, what if those handling function has dependencies such as DB, then it&rsquo;s really really hard to test.</p>
<p>When I try to solve this problem, I separate specific package into 2 smaller packages:</p>
<ol>
<li>create http server which predefined handler</li>
<li>handler that setups routes/function relationships</li>
</ol>
<p>In this way, server can be tested by fake handler, no need to setup dependency such as DB. On the other hand, handler to be fed to fake server, so that no actual connection is needed.o</p>
<p>Before refactoring, code has only one function: <code>CreateServer(...)</code>, after refactoring, additional packages are generated:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">handler</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Handler</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">A</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nf">B</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nf">C</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nf">D</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">server</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="o">...</span><span class="p">,</span> <span class="nx">hdlr</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewServerMux</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/a&#34;</span><span class="p">,</span> <span class="nx">hdlr</span><span class="p">.</span><span class="nx">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/b&#34;</span><span class="p">,</span> <span class="nx">hdlr</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/c&#34;</span><span class="p">,</span> <span class="nx">hdlr</span><span class="p">.</span><span class="nx">C</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/d&#34;</span><span class="p">,</span> <span class="nx">hdlr</span><span class="p">.</span><span class="nx">D</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>In this way, dependency of handler and server are separeted and thus easy to test. For example, when testing <code>server.New</code>, I can feed a fake handler and check if when <code>/a</code> is visited, specific interface is invoked.</p>
<ul>
<li>Open-Closed Principle</li>
</ul>
<p>This one is easy, use <code>interface</code> is mostly the cure. When I tries to refactor from function/method into interface, the way I use is first move all dependency into argument, create an interface, use it.</p>
<p>Take following code as an example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">one</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">two</span><span class="p">.</span><span class="nf">Set</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">two</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Set</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">()</span><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Because <code>Set</code> is a function that has dependency to DB, and <code>test</code> directly calles package function which is hard to control, I may refactor it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">one</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">test</span><span class="p">(</span><span class="nx">t</span> <span class="nx">two</span><span class="p">.</span><span class="nx">Two</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">t</span><span class="p">.</span><span class="nf">Set</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">two</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Two</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Set</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">data</span> <span class="kd">struct</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">data</span><span class="p">)</span> <span class="nf">Set</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">db</span><span class="p">.</span><span class="nf">Set</span><span class="p">()</span><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Get</span><span class="p">()</span> <span class="nx">Two</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">&amp;</span><span class="nx">data</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I will have a exporeted function <code>Get</code> to acquire <code>interface</code>, then everything can be tested by specific argument.</p>
<ul>
<li>Interface Segratation Principle</li>
</ul>
<p>This one is more like how small a <code>interface</code> can be, what I try to think is the minimal requirement of data strucuture, if some data strucutre is only used by some API, then it&rsquo;s likely that API can be separated into smaller ones.</p>
<p>As an example of this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">t</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Set</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nf">OK</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">data</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">value</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">  <span class="nx">initialised</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">data</span><span class="p">)</span> <span class="nf">Get</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">value</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">data</span><span class="p">)</span> <span class="nf">Set</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">d</span><span class="p">.</span><span class="nx">value</span> <span class="p">=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">data</span><span class="p">)</span> <span class="nf">OK</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">initialised</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>From example, only variable <code>Get</code> &amp; <code>Set</code> relates is <code>value</code>, and <code>OK</code> relates to <code>initialised</code>, so I would separete this <code>interface</code> into two:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">t</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">t1</span>
</span></span><span class="line"><span class="cl">  <span class="nx">t2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">t1</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Set</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">t2</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">OK</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Of course this is a simple example, real world is much more complex, it has lock, communication, efficiency to consider, but how many variables related is how I consider when to separete <code>interface</code>.</p>
<p>To summarzie, programming is a technique to make code clena, simple, flexible, and testable. I am still trying to learn how to code in a better way, this is just what I learned from 3 weeks of refactoring. At last, <a href="https://github.com/bitmark-inc/bitmarkd/pull/135">this</a> and <a href="https://github.com/bitmark-inc/bitmarkd/pull/144">this</a> is my modification for code, hope I can have better skills through career.</p>
]]></content>
		</item>
		
		<item>
			<title>Leetcode</title>
			<link>/posts/leetcode/</link>
			<pubDate>Fri, 13 Dec 2019 20:20:35 +0800</pubDate>
			
			<guid>/posts/leetcode/</guid>
			<description>最近花了不少時間寫 Leetcode，起源說起來很簡單，有個大學同學花了三年，每年都面試美國 FAANG 這幾間大公司，最近成功進入其中一間。
這故事聽起來很狗血，好像傳統教條「努力一定會成功」，但我得到啟發並不是這個。
如果一件事做起來很無聊又好像沒什麼成效，做失敗還會有心理上挫敗，那麼一般情況下人會想做嗎？很大概率是不會吧，就像讀書這種事，出了學校之後很少有人會願意再這麼做了，很大一部份原因在於很難看到成效，世界上還沒有一種評量方式能知道一個人在知識、認知領域到底有多少進步。
那回過頭來，如果有人能做這件事，而且還持續不懈的做，那麼原因是什麼呢？自虐？無聊？我想，要不代表這個人有辦法在這件事裡面找到成就，或是因為這個人能用長遠眼光自律努力。
不論那個原因，背後代表的都是與眾不同，這也是我覺得這件事難的地方。
辜且不論 Leetcode 對於寫程式有多少幫助，或是在這個時代進入大公司到底是不是一個好選擇，如果一個人能持續努力提升，那麼在任何領域應該都能有不錯表現。
所以我最近也開始刷題，主要目的並不是為了進公司（如果能進也很好），主要還是為了養成自己持續精進習慣，在實際生活中實踐我所知道的道理。
這一兩個月寫的結果，是更深一層的體會到寫這些題目對於訓練自己思考很有幫助，而且也讓自己無懼於寫程式。雖然聽起來有點好笑，一個以寫程式為生的人怎麼會懼於寫程式？但事實上，透過這些訓練，讓我對寫出來的程式更有信心。
要寫多久呢？不曉得，至少最近幾個月會是我的主要目標，希望能有更多的收穫。</description>
			<content type="html"><![CDATA[<p>最近花了不少時間寫 Leetcode，起源說起來很簡單，有個大學同學花了三年，每年都面試美國 FAANG 這幾間大公司，最近成功進入其中一間。</p>
<p>這故事聽起來很狗血，好像傳統教條「努力一定會成功」，但我得到啟發並不是這個。</p>
<p>如果一件事做起來很無聊又好像沒什麼成效，做失敗還會有心理上挫敗，那麼一般情況下人會想做嗎？很大概率是不會吧，就像讀書這種事，出了學校之後很少有人會願意再這麼做了，很大一部份原因在於很難看到成效，世界上還沒有一種評量方式能知道一個人在知識、認知領域到底有多少進步。</p>
<p>那回過頭來，如果有人能做這件事，而且還持續不懈的做，那麼原因是什麼呢？自虐？無聊？我想，要不代表這個人有辦法在這件事裡面找到成就，或是因為這個人能用長遠眼光自律努力。</p>
<p>不論那個原因，背後代表的都是與眾不同，這也是我覺得這件事難的地方。</p>
<p>辜且不論 Leetcode 對於寫程式有多少幫助，或是在這個時代進入大公司到底是不是一個好選擇，如果一個人能持續努力提升，那麼在任何領域應該都能有不錯表現。</p>
<p>所以我最近也開始刷題，主要目的並不是為了進公司（如果能進也很好），主要還是為了養成自己持續精進習慣，在實際生活中實踐我所知道的道理。</p>
<p>這一兩個月寫的結果，是更深一層的體會到寫這些題目對於訓練自己思考很有幫助，而且也讓自己無懼於寫程式。雖然聽起來有點好笑，一個以寫程式為生的人怎麼會懼於寫程式？但事實上，透過這些訓練，讓我對寫出來的程式更有信心。</p>
<p>要寫多久呢？不曉得，至少最近幾個月會是我的主要目標，希望能有更多的收穫。</p>
]]></content>
		</item>
		
		<item>
			<title>Correct My Errors</title>
			<link>/posts/correct-my-errors/</link>
			<pubDate>Sat, 30 Nov 2019 11:06:30 +0800</pubDate>
			
			<guid>/posts/correct-my-errors/</guid>
			<description>最近看到新聞，人類到目前為止唯一在公開賽中贏過 AlphaGo 的韓國棋手李世㐔宣部退休，結束其24年圍棋生涯。
基於好奇心的原故，想了解那局棋賽到底是怎麼贏的（以下說明文字來自wiki)：
李世乭（白方）勝出第四局；古力將李世乭78手稱為「神之一手」，AlphaGo大約在87手才發現它79手算錯了，其後AlphaGo在97手時更出現入門級別的錯誤；李世乭在這次比賽發現AlphaGo用黑子對抗白子時，若遇上不在預期內的棋步就可能出錯；其次，只要AlphaGo用黑子下棋，猶疑的時間更久[27]。而這些錯誤的原因，DeepMind團隊還沒有找出來[28]。
簡單概括第四局過程：AlphaGo 在 79 手犯錯，在 87 手發現先前錯誤，在 97 手犯另一個錯，做個簡單假設棋局 100 手大置決定結果，那麼 79 手的錯誤經過 8 手後被發現，後續補救經過 10 手依舊無太大效果。
上面這段文字說明看起來稀鬆平常，但別忘了 AlphaGo 每秒超過上萬個運算, 即便是數分鐘運算人類終其一生大概也做不到麼多考慮；在這樣高強度、窮其算力找尋當下勝率最高的決定，也需要接近 100 手的 1/10 時間來發覺與修正錯誤， 如果拿人來比喻，某年植入一個錯誤思維，經過 8 年後終於發覺，再 10 年內補救。
上面的例子真實嗎？我也不確定，但如果是我有個致命思維植入，有辦法在多快時間內自我修正？我有多久沒有更正自己錯誤？
更有趣的是，李世㐔在賽後認為能贏得棋賽是 AI 的「缺陷」
李世乭向《韓聯社》解釋，「我的白78手不是一個該直接對付的棋路。在絕藝（中國圍棋AI）中也有一樣的錯誤。即使讓人類兩子，絕藝也是位非常難以拿下的對手。但因為錯誤的原因，當它輸時會以非常奇怪的形式落敗。」
事情經過兩年再重新讀相關新聞，突然覺得在這件裡判斷輸贏是簡單的，而難的是從什麼樣的角度解讀；時至今日，AI 已經能在許多人類曾經擅長領域用更快、更簡單方式執行。
我自己現在的感想：
在單一目標領域，電腦比人類更擅長
目標不再是想贏過電腦，而是如何擅用電腦長處
當下犯什麼錯誤不重要，更正錯誤速度才重要
如果極限已經明擺著在那邊，那麼要調整的是目標、心態、還是其它？
我該更專注在找尋自己錯誤，也許習慣清單上要再加一個：每週至少找到一個自己的錯誤</description>
			<content type="html"><![CDATA[<p>最近看到新聞，人類到目前為止唯一在公開賽中贏過 AlphaGo 的韓國棋手李世㐔宣部退休，結束其24年圍棋生涯。</p>
<p>基於好奇心的原故，想了解那局棋賽到底是怎麼贏的（以下說明文字來自<a href="https://zh.wikipedia.org/wiki/AlphaGo%E6%9D%8E%E4%B8%96%E4%B9%AD%E4%BA%94%E7%95%AA%E6%A3%8B">wiki</a>)：</p>
<blockquote>
<p>李世乭（白方）勝出第四局；古力將李世乭78手稱為「神之一手」，AlphaGo大約在87手才發現它79手算錯了，其後AlphaGo在97手時更出現入門級別的錯誤；李世乭在這次比賽發現AlphaGo用黑子對抗白子時，若遇上不在預期內的棋步就可能出錯；其次，只要AlphaGo用黑子下棋，猶疑的時間更久[27]。而這些錯誤的原因，DeepMind團隊還沒有找出來[28]。</p>
</blockquote>
<p>簡單概括第四局過程：AlphaGo 在 79 手犯錯，在 87 手發現先前錯誤，在 97 手犯另一個錯，做個簡單假設棋局 100 手大置決定結果，那麼 79 手的錯誤經過 8 手後被發現，後續補救經過 10 手依舊無太大效果。</p>
<p>上面這段文字說明看起來稀鬆平常，但別忘了 AlphaGo 每秒超過上萬個運算, 即便是數分鐘運算人類終其一生大概也做不到麼多考慮；在這樣高強度、窮其算力找尋當下勝率最高的決定，也需要接近 100 手的 1/10 時間來發覺與修正錯誤， 如果拿人來比喻，某年植入一個錯誤思維，經過 8 年後終於發覺，再 10 年內補救。</p>
<p>上面的例子真實嗎？我也不確定，但如果是我有個致命思維植入，有辦法在多快時間內自我修正？我有多久沒有更正自己錯誤？</p>
<p>更有趣的是，李世㐔在賽後認為能贏得棋賽是 AI 的<a href="https://www.bnext.com.tw/article/55680/alphago-lee-se-dol-retire">「缺陷」</a></p>
<blockquote>
<p>李世乭向《韓聯社》解釋，「我的白78手不是一個該直接對付的棋路。在絕藝（中國圍棋AI）中也有一樣的錯誤。即使讓人類兩子，絕藝也是位非常難以拿下的對手。但因為錯誤的原因，當它輸時會以非常奇怪的形式落敗。」</p>
</blockquote>
<p>事情經過兩年再重新讀相關新聞，突然覺得在這件裡判斷輸贏是簡單的，而難的是從什麼樣的角度解讀；時至今日，AI 已經能在許多人類曾經擅長領域用更快、更簡單方式執行。</p>
<p>我自己現在的感想：</p>
<ol>
<li>
<p>在單一目標領域，電腦比人類更擅長</p>
</li>
<li>
<p>目標不再是想贏過電腦，而是如何擅用電腦長處</p>
</li>
<li>
<p>當下犯什麼錯誤不重要，更正錯誤速度才重要</p>
</li>
<li>
<p>如果極限已經明擺著在那邊，那麼要調整的是目標、心態、還是其它？</p>
</li>
<li>
<p>我該更專注在找尋自己錯誤，也許習慣清單上要再加一個：每週至少找到一個自己的錯誤</p>
</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>First post</title>
			<link>/posts/first-post/</link>
			<pubDate>Fri, 01 Nov 2019 14:53:10 +0000</pubDate>
			
			<guid>/posts/first-post/</guid>
			<description>This is the first post, nothing particular to say, just the announcement.</description>
			<content type="html"><![CDATA[<p>This is the first post, nothing particular to say, just the announcement.</p>
]]></content>
		</item>
		
	</channel>
</rss>
