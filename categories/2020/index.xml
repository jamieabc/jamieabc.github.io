<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020 on Cognition Limits Imagination</title>
    <link>/categories/2020/</link>
    <description>Recent content in 2020 on Cognition Limits Imagination</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Aug 2023 18:32:50 +0800</lastBuildDate><atom:link href="/categories/2020/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>初心</title>
      <link>/posts/%E5%88%9D%E5%BF%83/</link>
      <pubDate>Sun, 20 Aug 2023 18:32:50 +0800</pubDate>
      
      <guid>/posts/%E5%88%9D%E5%BF%83/</guid>
      <description>最近工作比較不順，也可以說是處在低谷，這時腦中容易浮起一些問題，像是什麼時候退休、人生的意義、生命的價值。
這時剛好聽到劉宣訪問江振誠，突然覺得跟這些人相比，差距很大。
不論是想法、經歷、成就，完全是連別人車尾燈都看不到。
採訪的開始，江振誠說的都是他覺得生活該如何，像是花時間挑選適合當天心情的黑膠唱片、如何呈現菜色，講的都是一種體驗，專注的是過程。
我好像是個更重視結果的人吧…這會不會是困頓的來源？</description>
    </item>
    
    <item>
      <title>Leetcode 1552 (2)</title>
      <link>/posts/leetcode-1552-2/</link>
      <pubDate>Tue, 25 Aug 2020 20:25:19 +0800</pubDate>
      
      <guid>/posts/leetcode-1552-2/</guid>
      <description>This article tries to write down some notes while trying to solve problem 1552.
After some days of thinking, I finally understand why this is a binary search problem.
Thinking Didn&amp;rsquo;t think of binary search because I miss some details about this problem:
 To get maximum of minimum distance among selected numbers, smallest &amp;amp; largest numbers will definited being selected, because choosing them provides maximum range to distribute distance.    Once smallest &amp;amp; largest numbers are selected, theoretically maximum distance could be upper bounded to (largest - smallest) / (selected - 1)</description>
    </item>
    
    <item>
      <title>Leetcode 1552 (1)</title>
      <link>/posts/leetcode-1552-1/</link>
      <pubDate>Fri, 21 Aug 2020 20:19:13 +0800</pubDate>
      
      <guid>/posts/leetcode-1552-1/</guid>
      <description>This article tries to write down some notes while trying to solve problem 1552.
I think this problem can be restated as follows: given some positive integers with total size n, pick m numbers such that minimum distance among each selected is maximum.
When first see this problem, I think it&amp;rsquo;s a knapsack problem: every number will be selected or not, find those possible combinations (pick m from n), calculate minimum distance, choose maximum from them.</description>
    </item>
    
    <item>
      <title>Leetcode 1547 (2)</title>
      <link>/posts/leetcode-1547-2/</link>
      <pubDate>Sat, 15 Aug 2020 12:43:05 +0800</pubDate>
      
      <guid>/posts/leetcode-1547-2/</guid>
      <description>Thinking After brute force to find a solution and think about this proble, I have some other observations.
Initially I have the idea to choosing closest middle cut in range, and it fails to guarantee always global optimal result.
More specifically, the heuristic fails at this test case: n = 30, cuts = [5, 7, 13, 15, 18, 25, 26, 29]
According to find closest middle cut, it will choose 15 as first cut since it&amp;rsquo;s the the half of 30, and best min cuts under 15 is 94, one of the possible outcome is [15, 7, 5, 13, 25, 26, 29, 18]</description>
    </item>
    
    <item>
      <title>Leetcode 1547 (1)</title>
      <link>/posts/leetcode-1547-1/</link>
      <pubDate>Mon, 10 Aug 2020 15:48:42 +0800</pubDate>
      
      <guid>/posts/leetcode-1547-1/</guid>
      <description>This article is to write down some notes while solving this problem.
Greedy I started with this example:
 n = 7, cuts = [1,3,4,5]
   initial status:
 _ _ _ _ _ _ _ 0 7    first cut at 3:
 _ _ _ _ | _ _ _ _ _ 0 3 3 7  cost: 7 (because total length before cut is 7)</description>
    </item>
    
    <item>
      <title>Raise Coverate Rate to 80</title>
      <link>/posts/raise-coverate-rate-to-80/</link>
      <pubDate>Sun, 08 Mar 2020 17:25:34 +0800</pubDate>
      
      <guid>/posts/raise-coverate-rate-to-80/</guid>
      <description>Recently I have done raising unit tests coverage rate of 2 packages to at least 80%. Of course, high coverage rate isn&amp;rsquo;t always a gold standard to achieve, and some corner conditions are not necessray to test, so 80% seems a number that tries to demonstrate most code paths are testable.
These 2 packges with 0% and 20% unit test coverate rate at the time I started to modify. After some refactoring, both packages&#39; coverage rate reaches 80%.</description>
    </item>
    
  </channel>
</rss>
