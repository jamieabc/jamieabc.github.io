<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cognition Limits Imagination</title>
    <link>/</link>
    <description>Recent content on Cognition Limits Imagination</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Jul 2021 23:14:09 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dropbox Engineer Ladder</title>
      <link>/posts/dropbox-engineer-ladder/</link>
      <pubDate>Fri, 16 Jul 2021 23:14:09 +0800</pubDate>
      
      <guid>/posts/dropbox-engineer-ladder/</guid>
      <description>最近 Dropbox 發布了 engineer ladder
從 software engineer 到 quality assurance engineer，再到 reliability engineer，不同層級有著不同的標準。
大公司有著明確制度，想要往上爬就需要滿足特定條件，一方面是學習，另一方面也是挑戰，能不能上去還是看個人。
公司內部也有相對應文件，我想，先定好目標，比較知道缺失什麼需要補強。</description>
    </item>
    
    <item>
      <title>David Recardo</title>
      <link>/posts/david-recardo/</link>
      <pubDate>Tue, 06 Jul 2021 22:15:48 +0800</pubDate>
      
      <guid>/posts/david-recardo/</guid>
      <description>李嘉圖定律：
 土地租金是土地使用者支付的價格，它是由壟斷性（稀缺性）決定，而不是由地主在上面做的投資和改良成本決定；它的價格受限於租用者（農民）能夠承擔的價格。
 空氣因為供給無限，所以沒有任何價值；土地從某方面來說也是無限的（地球上還有很多地方的土地未經開發、居住），但不同地段租金有極大差異，為什麼同樣是自然資源，前者沒有任何價值，而後者有極大差異？
李嘉圖給出了一個解釋，土地租金由兩個因素決定：收入差、和其他投資回報對比。
第一個因素來自於自身產出，一片土地有充足水量，能產出的農作物會比貧瘠土地上所產出的農作物多，於是收入差別造成了租金差別。這個原因也同樣適用於人流多的地段、交通發達地段。
第二個因素來自於跟其它投資相比，如果買股票的回報率大於炒房，那麼錢會往股票湧入，於是投入到房地產的資金減少，土地價格下降，造成土地的投資回報率上升。
這個定律並不只存在於自然資源，只要是稀缺資源都適用。隨著網路普及，資訊的流通讓大眾更容易知道什麼是稀缺品，於是在這個時候，同樣商品，不同品質價格會有極大的差異，Iphone、AWS、疫苗、有名講師、著名歌手演唱會門票、台鐵訂票系統，等等。
只要資源稀缺（台灣某些路段的火車），價差就會持續存在。
後面兩句也很關鍵，代表著只要別人成功（有辦法取得高獲利），自己就會成功（租金上漲），好像很雞湯的解釋。</description>
    </item>
    
    <item>
      <title>One and Half Year</title>
      <link>/posts/one-and-half-year/</link>
      <pubDate>Tue, 29 Jun 2021 19:53:14 +0800</pubDate>
      
      <guid>/posts/one-and-half-year/</guid>
      <description>不知不覺，刷題一年半了，從一開始的好奇到有點厭煩，如今習以為常。
有段時間非常在意效率，今天寫了幾題各花了多少時間；有段時間比較怠惰，時間一到就休息。
過去的記憶開始模糊，這一年半好像很累，但又好像轉瞬即逝，最後定格的，是某次上班超累，下班完坐在星巴克，頭痛愈裂，想寫題目卻想不出任何解法。
細節已經不太清楚，只記得那個感覺…只記得努力。
我想，人還是低調、謙虛點，能走的比較遠吧。</description>
    </item>
    
    <item>
      <title>Bus Factor</title>
      <link>/posts/bus-factor/</link>
      <pubDate>Sun, 27 Jun 2021 18:40:21 +0800</pubDate>
      
      <guid>/posts/bus-factor/</guid>
      <description>The number of people that need to get hit by a bus before your project is completely doomed.
 這個指標橫量多少人熟悉專案，直觀上來說如果只有原作者了解專案，那麼專案就愈容易受到個人影嚮；了解的人愈多代表專案相關的知識愈被廣泛熟知。有趣的是，書中提到這個概念並不是在 knowledge sharing 相關章節，而是在鼓勵多與人互動的章節。
大部份人的天性是希望等到程式碼寫到完美後再發佈，但只有一個人知道的專案除了容易後繼無人外，缺乏討論、溝通的專案很可能在設計初期就埋藏了不可彌補的錯誤。
常見的 Documentation，Pair pairgramming，Code review 都可以避免知識只存在少數人腦中的情況。</description>
    </item>
    
    <item>
      <title>Leetcode 795</title>
      <link>/posts/leetcode-795/</link>
      <pubDate>Sun, 20 Jun 2021 14:12:16 +0800</pubDate>
      
      <guid>/posts/leetcode-795/</guid>
      <description>Program description at here
Although I know this problem can be solved in linear time, it still takes me a while to fiture out the optimal solution.
Taking an example of array [1, 2, 1, 3, 1, 4], maximum range from 2 ~ 3.
[1, 2, 1, 3, 1, 4] ^ start from here, 1 &amp;lt; 2 not in range, total 4 sub-arrays meet criteria: [1, 2], [1, 2, 1], [1, 2, 1, 3], [1, 2, 1, 3, 1] ^ start from here, 2 &amp;gt;= 2 &amp;amp;&amp;amp; 2 &amp;lt;= 3 in range, total 4 sub-arrays meet criteria: [2], [2, 1], [2, 1, 3], [2, 1, 3, 1] ^ start from here, 1 &amp;lt; 2, not in range, total 2 sub-arrays meet criteria: [1, 3], [1, 3, 1] ^ start from here, 3 &amp;gt;= 2 &amp;amp;&amp;amp; 3 &amp;lt;= 3 in range, total 2 sub-arrays meet criteria: [3], [3, 1] ^ start from here, 1 &amp;lt; 2 not in range, total 0 sub-arrays meet criteria It&amp;rsquo;s obvious to check valid sub-arrays start from specific index, this way guarantees no duplicate count exists.</description>
    </item>
    
    <item>
      <title>Hyrum&#39;s Law</title>
      <link>/posts/hyrum-law/</link>
      <pubDate>Wed, 16 Jun 2021 21:58:12 +0800</pubDate>
      
      <guid>/posts/hyrum-law/</guid>
      <description>這章在講 scalability，裡面提到一個概念 Hyrum&amp;rsquo;s Law (Hyrum 是 Google 工程師):
 With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.
 這段話大意是任何提供給外部系統的 API，不論文件上如何寫，任何可被觀測的行為最終都會被某種方式所依賴。有點繞口，書上舉的例子是 hash table，幾乎所有工程師都知道 hash table 內儲存物件的順序是不固定的，所以程式執行不該依賴於 hash table 所提供的順序。
我在這部影片中聽到原作者的另一個例子：在某個 c++ 的 header file 裡面加了一行註解，導致測試壞掉……how could that happen? 原來是有人把測試寫死在程式執行到第幾行的時候，所以新增註解導致錯誤。
愈多人使用 API 代表提供愈高的價值，但因為愈多人使用也促使這隻 API 的 dependency 愈高，反而阻止了 API 更新。</description>
    </item>
    
    <item>
      <title>Leetcode 1552 (2)</title>
      <link>/posts/leetcode-1552-2/</link>
      <pubDate>Tue, 25 Aug 2020 20:25:19 +0800</pubDate>
      
      <guid>/posts/leetcode-1552-2/</guid>
      <description>This article tries to write down some notes while trying to solve problem 1552.
After some days of thinking, I finally understand why this is a binary search problem.
Thinking Didn&amp;rsquo;t think of binary search because I miss some details about this problem:
 To get maximum of minimum distance among selected numbers, smallest &amp;amp; largest numbers will definited being selected, because choosing them provides maximum range to distribute distance.    Once smallest &amp;amp; largest numbers are selected, theoretically maximum distance could be upper bounded to (largest - smallest) / (selected - 1)</description>
    </item>
    
    <item>
      <title>Leetcode 1552 (1)</title>
      <link>/posts/leetcode-1552-1/</link>
      <pubDate>Fri, 21 Aug 2020 20:19:13 +0800</pubDate>
      
      <guid>/posts/leetcode-1552-1/</guid>
      <description>This article tries to write down some notes while trying to solve problem 1552.
I think this problem can be restated as follows: given some positive integers with total size n, pick m numbers such that minimum distance among each selected is maximum.
When first see this problem, I think it&amp;rsquo;s a knapsack problem: every number will be selected or not, find those possible combinations (pick m from n), calculate minimum distance, choose maximum from them.</description>
    </item>
    
    <item>
      <title>Leetcode 1547 (2)</title>
      <link>/posts/leetcode-1547-2/</link>
      <pubDate>Sat, 15 Aug 2020 12:43:05 +0800</pubDate>
      
      <guid>/posts/leetcode-1547-2/</guid>
      <description>Thinking After brute force to find a solution and think about this proble, I have some other observations.
Initially I have the idea to choosing closest middle cut in range, and it fails to guarantee always global optimal result.
More specifically, the heuristic fails at this test case: n = 30, cuts = [5, 7, 13, 15, 18, 25, 26, 29]
According to find closest middle cut, it will choose 15 as first cut since it&amp;rsquo;s the the half of 30, and best min cuts under 15 is 94, one of the possible outcome is [15, 7, 5, 13, 25, 26, 29, 18]</description>
    </item>
    
    <item>
      <title>Leetcode 1547 (1)</title>
      <link>/posts/leetcode-1547-1/</link>
      <pubDate>Mon, 10 Aug 2020 15:48:42 +0800</pubDate>
      
      <guid>/posts/leetcode-1547-1/</guid>
      <description>This article is to write down some notes while solving this problem.
Greedy I started with this example:
 n = 7, cuts = [1,3,4,5]
   initial status:
 _ _ _ _ _ _ _ 0 7    first cut at 3:
 _ _ _ _ | _ _ _ _ _ 0 3 3 7  cost: 7 (because total length before cut is 7)</description>
    </item>
    
  </channel>
</rss>